@startuml
title SmartHomeSystem Container Diagram

top to bottom direction


'!include ./C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "User", "A user of the SmartHome system")
Person(admin, "Admin", "Administrator of the SmartHome system")
System(SmartHomeSystem, "SmartHome System", "System manages user's smart home")

Container_Boundary(SmartHomeSystem, "SmartHome System") {
    Container(UserFrontend, "Web Application frontend", "JS/TS/React", "Handles user interactions")
    Container(AdminFrontend, "Admin panel frontend", "JS/TS/React", "Handles admin interactions")
    Container(ApiGateway, "BackendApiGateway", "Kong|Kusk", "Check auth, load balancing, microservices routing")
    Container(ApiGateway, "BackendApiGateway", "Kong|Kusk", "Check auth, load balancing, microservices routing")

    together {
        together {
            Container(DeviceManager, "Device manager microservice", "golang", "Handle user's sensors and controllers")
            Container(Database, "Database", "PostgreSQL", "Stores sensor's data and current setup")
        }
        together {
            Container(Telemetry, "Telemetry microservice", "golang", "Handle user's sensors telemetry")
            Container(DatabaseTelemetry, "NoSQL database", "MonogoDB", "Stores devices telemetry")
        }
    }

    together {
        Container(AuthService, "Auth microservice", "golang", "user auth service")
        Container(AuthServiceDatabase, "Auth microservice DB", "PostgreSQL", "Stores auth data (tokens, etc)")
    }

    together {
        Container(UserProfileService, "User profile microservice", "golang", "Users profile data")
        Container(UserProfileServiceDatabase, "User microservice DB", "PostgreSQL", "Stores users")
    }

        together {
            Container(Monolith, "Monolith", "java", "Monolith web app")
            Container(MonolithDatabase, "Monolith DB", "PostgreSQL", "Stores heating device's data")
        }

    Container(Databus, "Databus", "Kafka", "Messages for async processing")
}

System_Ext(usersHome, "UserSmartHomeSystem", "Sensors and controllers in the user's home")

Rel(user, UserFrontend, "Uses the system: control smart home using SaaS system")
Rel(admin, AdminFrontend,"Register/update user's home devices")
Rel(UserFrontend, ApiGateway, "handle http requests")
Rel(AdminFrontend, ApiGateway, "handle http requests")
Rel(ApiGateway, Telemetry, "handle http requests")
Rel(ApiGateway, DeviceManager, "handle http requests")
Rel(ApiGateway, AuthService, "check auth")
Rel(ApiGateway, UserProfileService, "register/edit user profile")
Rel(ApiGateway, Monolith, "handle http requests")
Rel(DeviceManager,Telemetry,"Get telemetry data")
Rel(DeviceManager,Databus,"Subscribe for telemetry data")
Rel(Telemetry,Databus,"Publish telemetry user device's data")
Rel(DeviceManager,Database,"Reads/Writes smartHome data")
Rel(Telemetry,DatabaseTelemetry,"Reads/Writes smartHome sensors telemetry")
Rel(AuthService, AuthServiceDatabase, "Reads/Writes auth data")
Rel(UserProfileService, UserProfileServiceDatabase, "Reads/Writes user profile data")
Rel(Monolith, MonolithDatabase, "Reads/Writes user's heating devices data")
Rel(Monolith, Databus, "Subscribe for telemetry heating devices events")
Rel(Monolith, usersHome, "Send command to control heating devices")
Rel(DeviceManager, usersHome, "Send commands to devices")
Rel(usersHome,ApiGateway,"Writes smartHome sensors telemetry")

Monolith -[hidden]down- usersHome
DeviceManager -[hidden]right- Telemetry
ApiGateway -[hidden]down- Telemetry
@enduml